{"ast":null,"code":"import { getUser } from \"../Context/Reducer\"; // export const backendbaseURL = \"https://iglapi.herokuapp.com/Admin/\";\n// export const backendbaseURL = \"https://iglapistaging.herokuapp.com/admin/\";\n\nexport const backendbaseURL = \"http://localhost:3000/Admin/\";\nlet abortController = null;\nexport const callAPI = async ({\n  URL = \"\",\n  method = \"GET\",\n  body = \"\",\n  bodyType = \"raw\",\n  abort = false\n}) => {\n  try {\n    // checking internet connection\n    if (!navigator.onLine) {\n      return {\n        status: 500,\n        message: \"NO_INTERNET_CONNECTION\"\n      };\n    }\n\n    if (abort) {\n      abortController && abortController.abort();\n    }\n\n    const options = {\n      method: method\n    }; // adding body\n\n    if (body) {\n      options.body = bodyType === \"raw\" ? JSON.stringify(body) : body;\n      if (bodyType === \"raw\") options.headers = {\n        \"Content-Type\": \"application/json\"\n      };\n    } // adding auth token\n\n\n    if (!URL.includes(\"auth\")) {\n      const user = getUser();\n      if (!options.headers) options.headers = {};\n      options.headers.authToken = user.authToken;\n      options.headers.userId = user._id;\n    }\n\n    URL = backendbaseURL + URL;\n    console.log(\"FETCH_OPTIONS : \", URL, options); // abort controller\n\n    abortController = new AbortController();\n    options.signal = abortController.signal; // fetching\n\n    const response = await fetch(URL, options); // getting response\n\n    console.log(\"FETCH_RESPONSE  : \", response);\n\n    if (response.status !== 200) {\n      console.log(await response.text());\n      return {\n        status: 500\n      };\n    }\n\n    const resJSON = parseJSON(await response.text());\n    console.log(\"FETCH_RESULT : \", resJSON);\n    return resJSON;\n  } catch (err) {\n    return errorHandler(err);\n  }\n};\n\nconst parseJSON = text => {\n  try {\n    return JSON.parse(text);\n  } catch (err) {\n    return {\n      status: 500,\n      data: text\n    };\n  }\n};\n\nfunction errorHandler(err) {\n  const errString = err.toString();\n\n  if (errString === \"AbortError: The user aborted a request.\") {\n    console.log(\"REQUEST_ABORTED\");\n    return {\n      status: 0\n    };\n  }\n\n  if (!err.status) console.log(\"error : \", err);\n  return {\n    status: 500,\n    message: \"FETCH_SERVER_ERROR\",\n    error: err.toString()\n  };\n}\n\nexport const fDate = date => {\n  var month = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"June\", \"July\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"];\n  var defDate = new Date(date);\n  const dateObj = {\n    sec: defDate.getSeconds() / 10 < 1 ? \"0\" + defDate.getSeconds() : defDate.getSeconds(),\n    min: defDate.getMinutes() / 10 < 1 ? \"0\" + defDate.getMinutes() : defDate.getMinutes(),\n    hour: defDate.getHours() / 10 < 1 ? \"0\" + defDate.getHours() : defDate.getHours(),\n    day: defDate.getDate() / 10 < 1 ? \"0\" + defDate.getDate() : defDate.getDate(),\n    month: month[defDate.getMonth()],\n    year: defDate.getFullYear()\n  };\n  var newDate = `${dateObj.day} ${dateObj.month} ${dateObj.year} ${dateObj.hour}:${dateObj.min}:${dateObj.sec}`;\n  return newDate;\n};","map":{"version":3,"sources":["/Users/asifahmad/Documents/GitHub/igl-admin/src/common/common.js"],"names":["getUser","backendbaseURL","abortController","callAPI","URL","method","body","bodyType","abort","navigator","onLine","status","message","options","JSON","stringify","headers","includes","user","authToken","userId","_id","console","log","AbortController","signal","response","fetch","text","resJSON","parseJSON","err","errorHandler","parse","data","errString","toString","error","fDate","date","month","defDate","Date","dateObj","sec","getSeconds","min","getMinutes","hour","getHours","day","getDate","getMonth","year","getFullYear","newDate"],"mappings":"AAAA,SAASA,OAAT,QAAwB,oBAAxB,C,CACA;AACA;;AACA,OAAO,MAAMC,cAAc,GAAG,8BAAvB;AAEP,IAAIC,eAAe,GAAG,IAAtB;AACA,OAAO,MAAMC,OAAO,GAAG,OAAM;AAAEC,EAAAA,GAAG,GAAG,EAAR;AAAYC,EAAAA,MAAM,GAAG,KAArB;AAA4BC,EAAAA,IAAI,GAAG,EAAnC;AAAuCC,EAAAA,QAAQ,GAAG,KAAlD;AAAyDC,EAAAA,KAAK,GAAG;AAAjE,CAAN,KAAmF;AACtG,MAAI;AACA;AACA,QAAI,CAACC,SAAS,CAACC,MAAf,EAAuB;AACnB,aAAO;AACHC,QAAAA,MAAM,EAAE,GADL;AAEHC,QAAAA,OAAO,EAAE;AAFN,OAAP;AAIH;;AAED,QAAIJ,KAAJ,EAAW;AACPN,MAAAA,eAAe,IAAIA,eAAe,CAACM,KAAhB,EAAnB;AACH;;AAED,UAAMK,OAAO,GAAG;AACZR,MAAAA,MAAM,EAAEA;AADI,KAAhB,CAbA,CAiBA;;AACA,QAAIC,IAAJ,EAAU;AACNO,MAAAA,OAAO,CAACP,IAAR,GAAeC,QAAQ,KAAK,KAAb,GAAqBO,IAAI,CAACC,SAAL,CAAeT,IAAf,CAArB,GAA4CA,IAA3D;AACA,UAAIC,QAAQ,KAAK,KAAjB,EACIM,OAAO,CAACG,OAAR,GAAkB;AACd,wBAAgB;AADF,OAAlB;AAGP,KAxBD,CA0BA;;;AACA,QAAI,CAACZ,GAAG,CAACa,QAAJ,CAAa,MAAb,CAAL,EAA2B;AACvB,YAAMC,IAAI,GAAGlB,OAAO,EAApB;AACA,UAAI,CAACa,OAAO,CAACG,OAAb,EAAsBH,OAAO,CAACG,OAAR,GAAkB,EAAlB;AACtBH,MAAAA,OAAO,CAACG,OAAR,CAAgBG,SAAhB,GAA4BD,IAAI,CAACC,SAAjC;AACAN,MAAAA,OAAO,CAACG,OAAR,CAAgBI,MAAhB,GAAyBF,IAAI,CAACG,GAA9B;AACH;;AACDjB,IAAAA,GAAG,GAAGH,cAAc,GAAGG,GAAvB;AAEAkB,IAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ,EAAgCnB,GAAhC,EAAqCS,OAArC,EAnCA,CAqCA;;AACAX,IAAAA,eAAe,GAAG,IAAIsB,eAAJ,EAAlB;AACAX,IAAAA,OAAO,CAACY,MAAR,GAAiBvB,eAAe,CAACuB,MAAjC,CAvCA,CAyCA;;AACA,UAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACvB,GAAD,EAAMS,OAAN,CAA5B,CA1CA,CA4CA;;AACAS,IAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ,EAAkCG,QAAlC;;AAEA,QAAIA,QAAQ,CAACf,MAAT,KAAoB,GAAxB,EAA6B;AACzBW,MAAAA,OAAO,CAACC,GAAR,CAAY,MAAMG,QAAQ,CAACE,IAAT,EAAlB;AACA,aAAO;AACHjB,QAAAA,MAAM,EAAE;AADL,OAAP;AAGH;;AACD,UAAMkB,OAAO,GAAGC,SAAS,CAAC,MAAMJ,QAAQ,CAACE,IAAT,EAAP,CAAzB;AACAN,IAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ,EAA+BM,OAA/B;AACA,WAAOA,OAAP;AACH,GAxDD,CAwDE,OAAOE,GAAP,EAAY;AACV,WAAOC,YAAY,CAACD,GAAD,CAAnB;AACH;AACJ,CA5DM;;AA8DP,MAAMD,SAAS,GAAIF,IAAD,IAAU;AACxB,MAAI;AACA,WAAOd,IAAI,CAACmB,KAAL,CAAWL,IAAX,CAAP;AACH,GAFD,CAEE,OAAOG,GAAP,EAAY;AACV,WAAO;AACHpB,MAAAA,MAAM,EAAE,GADL;AAEHuB,MAAAA,IAAI,EAAEN;AAFH,KAAP;AAIH;AACJ,CATD;;AAWA,SAASI,YAAT,CAAsBD,GAAtB,EAA2B;AACvB,QAAMI,SAAS,GAAGJ,GAAG,CAACK,QAAJ,EAAlB;;AACA,MAAID,SAAS,KAAK,yCAAlB,EAA6D;AACzDb,IAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ;AACA,WAAO;AACHZ,MAAAA,MAAM,EAAE;AADL,KAAP;AAGH;;AACD,MAAI,CAACoB,GAAG,CAACpB,MAAT,EAAiBW,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAwBQ,GAAxB;AACjB,SAAO;AACHpB,IAAAA,MAAM,EAAE,GADL;AAEHC,IAAAA,OAAO,EAAE,oBAFN;AAGHyB,IAAAA,KAAK,EAAEN,GAAG,CAACK,QAAJ;AAHJ,GAAP;AAKH;;AACD,OAAO,MAAME,KAAK,GAAIC,IAAD,IAAU;AAC3B,MAAIC,KAAK,GAAG,CAAC,KAAD,EAAQ,KAAR,EAAe,KAAf,EAAsB,KAAtB,EAA6B,KAA7B,EAAoC,MAApC,EAA4C,MAA5C,EAAoD,KAApD,EAA2D,KAA3D,EAAkE,KAAlE,EAAyE,KAAzE,EAAgF,KAAhF,CAAZ;AACA,MAAIC,OAAO,GAAG,IAAIC,IAAJ,CAASH,IAAT,CAAd;AACA,QAAMI,OAAO,GAAG;AACZC,IAAAA,GAAG,EAAEH,OAAO,CAACI,UAAR,KAAuB,EAAvB,GAA4B,CAA5B,GAAgC,MAAMJ,OAAO,CAACI,UAAR,EAAtC,GAA6DJ,OAAO,CAACI,UAAR,EADtD;AAEZC,IAAAA,GAAG,EAAEL,OAAO,CAACM,UAAR,KAAuB,EAAvB,GAA4B,CAA5B,GAAgC,MAAMN,OAAO,CAACM,UAAR,EAAtC,GAA6DN,OAAO,CAACM,UAAR,EAFtD;AAGZC,IAAAA,IAAI,EAAEP,OAAO,CAACQ,QAAR,KAAqB,EAArB,GAA0B,CAA1B,GAA8B,MAAMR,OAAO,CAACQ,QAAR,EAApC,GAAyDR,OAAO,CAACQ,QAAR,EAHnD;AAIZC,IAAAA,GAAG,EAAET,OAAO,CAACU,OAAR,KAAoB,EAApB,GAAyB,CAAzB,GAA6B,MAAMV,OAAO,CAACU,OAAR,EAAnC,GAAuDV,OAAO,CAACU,OAAR,EAJhD;AAKZX,IAAAA,KAAK,EAAEA,KAAK,CAACC,OAAO,CAACW,QAAR,EAAD,CALA;AAMZC,IAAAA,IAAI,EAAEZ,OAAO,CAACa,WAAR;AANM,GAAhB;AAQA,MAAIC,OAAO,GAAI,GAAEZ,OAAO,CAACO,GAAI,IAAGP,OAAO,CAACH,KAAM,IAAGG,OAAO,CAACU,IAAK,IAAGV,OAAO,CAACK,IAAK,IAAGL,OAAO,CAACG,GAAI,IAAGH,OAAO,CAACC,GAAI,EAA5G;AACA,SAAOW,OAAP;AACH,CAbM","sourcesContent":["import { getUser } from \"../Context/Reducer\";\n// export const backendbaseURL = \"https://iglapi.herokuapp.com/Admin/\";\n// export const backendbaseURL = \"https://iglapistaging.herokuapp.com/admin/\";\nexport const backendbaseURL = \"http://localhost:3000/Admin/\";\n\nlet abortController = null;\nexport const callAPI = async({ URL = \"\", method = \"GET\", body = \"\", bodyType = \"raw\", abort = false }) => {\n    try {\n        // checking internet connection\n        if (!navigator.onLine) {\n            return {\n                status: 500,\n                message: \"NO_INTERNET_CONNECTION\",\n            };\n        }\n\n        if (abort) {\n            abortController && abortController.abort();\n        }\n\n        const options = {\n            method: method,\n        };\n\n        // adding body\n        if (body) {\n            options.body = bodyType === \"raw\" ? JSON.stringify(body) : body;\n            if (bodyType === \"raw\")\n                options.headers = {\n                    \"Content-Type\": \"application/json\",\n                };\n        }\n\n        // adding auth token\n        if (!URL.includes(\"auth\")) {\n            const user = getUser();\n            if (!options.headers) options.headers = {};\n            options.headers.authToken = user.authToken;\n            options.headers.userId = user._id;\n        }\n        URL = backendbaseURL + URL;\n\n        console.log(\"FETCH_OPTIONS : \", URL, options);\n\n        // abort controller\n        abortController = new AbortController();\n        options.signal = abortController.signal;\n\n        // fetching\n        const response = await fetch(URL, options);\n\n        // getting response\n        console.log(\"FETCH_RESPONSE  : \", response);\n\n        if (response.status !== 200) {\n            console.log(await response.text());\n            return {\n                status: 500,\n            };\n        }\n        const resJSON = parseJSON(await response.text());\n        console.log(\"FETCH_RESULT : \", resJSON);\n        return resJSON;\n    } catch (err) {\n        return errorHandler(err);\n    }\n};\n\nconst parseJSON = (text) => {\n    try {\n        return JSON.parse(text);\n    } catch (err) {\n        return {\n            status: 500,\n            data: text,\n        };\n    }\n};\n\nfunction errorHandler(err) {\n    const errString = err.toString();\n    if (errString === \"AbortError: The user aborted a request.\") {\n        console.log(\"REQUEST_ABORTED\");\n        return {\n            status: 0,\n        };\n    }\n    if (!err.status) console.log(\"error : \", err);\n    return {\n        status: 500,\n        message: \"FETCH_SERVER_ERROR\",\n        error: err.toString(),\n    };\n}\nexport const fDate = (date) => {\n    var month = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"June\", \"July\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"];\n    var defDate = new Date(date);\n    const dateObj = {\n        sec: defDate.getSeconds() / 10 < 1 ? \"0\" + defDate.getSeconds() : defDate.getSeconds(),\n        min: defDate.getMinutes() / 10 < 1 ? \"0\" + defDate.getMinutes() : defDate.getMinutes(),\n        hour: defDate.getHours() / 10 < 1 ? \"0\" + defDate.getHours() : defDate.getHours(),\n        day: defDate.getDate() / 10 < 1 ? \"0\" + defDate.getDate() : defDate.getDate(),\n        month: month[defDate.getMonth()],\n        year: defDate.getFullYear(),\n    };\n    var newDate = `${dateObj.day} ${dateObj.month} ${dateObj.year} ${dateObj.hour}:${dateObj.min}:${dateObj.sec}`;\n    return newDate;\n};"]},"metadata":{},"sourceType":"module"}